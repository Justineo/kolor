{"name":"Kolor","body":"# kolor\r\n\r\n*kolor* is a useful color manipulating tool in JavaScript.\r\n\r\nIt provides color string parsing, format converting and basic color adjusting methods.\r\n\r\nSupported color formats:\r\n\r\n*   RGB(A)\r\n*   HSL(A)\r\n*   HSV(A)\r\n\r\n\r\n## Usage\r\n\r\nJust include `kolor.js` in your HTML document:\r\n\r\n    <script src=\"kolor.js\"></script>\r\n\r\nCore functionalities are provided by the `kolor` object in global scope.\r\n\r\n### Creating a color object\r\n\r\nColors may be created in the following ways:\r\n\r\n1.  By parsing a given string value\r\n\r\n        var red = kolor('red'), //color name\r\n            green = kolor('rgb(0, 255, 0)'), //valid CSS expressions\r\n            blue = kolor('rgba(0%, 0%, 100%, 1)'), //more valid CSS expressions\r\n            cyan = kolor('hsv(180, 1, 1)'), //not supported by CSS but has a similar syntax\r\n            magenta = kolor('#ff00ff'), //hex RGB value\r\n            yellow = kolor('ff00ff'); //hex RGB value without '#'\r\n\r\n    Color names are defined by [W3C SVG color names used in CSS3](http://www.w3.org/TR/css3-color/#svg-color).\r\n\r\n    Names or hex values will generate RGB colors.\r\n\r\n2.  By specifying a color format\r\n\r\n        var red = kolor.rgb(255, 0, '0%'), //can use either number or percent string\r\n            green = kolor.rgb([0, 255, 0]), //using array\r\n            blue = kolor.rgb({ r: 0, g: 0, b: 255 }); //using object\r\n\r\n3.  By cloning another color object\r\n\r\n        var red = kolor('red'),\r\n            newRed = kolor(red);\r\n\r\n*Created colors are in certain formats and can be converted to other formats.*\r\n\r\n### Accessors\r\n\r\n*kolor* provides jQuery-like accessors for color objects.\r\n\r\n    color.red(128); //altering 'red' channel\r\n    color.r(255); //shorthand method is also available\r\n\r\n    console.log(color.r()); //255\r\n\r\nSetters return color object itself so we can do a bit of chaining:\r\n\r\n    color.r(255).g(128).b(128); //making it lighter\r\n\r\n### Value restriction\r\n\r\nWhen setting a value of a channel, the specified value will be automatically restricted within a valid range according to the channel configuration.\r\n\r\n    console.log(rgbColor.r(300).r()); //255\r\n    console.log(hslColor.h(-10).h()); //350\r\n    console.log(hsvColor.s('200%').s()); //1\r\n\r\n### Format conversion\r\n\r\nOnce a color object is created, it can be easily converted to other formats. After each conversion, a new color object will be produced and returned.\r\n\r\n    var hsvColor = rgbColor.hsv().h(120); //converts and sets\r\n\r\n### String output\r\n\r\n    console.log(red.hex()); //'#ff0000'\r\n    console.log(red.css()); //'rgb(255, 0, 0)'\r\n\r\n### Color transformation\r\n\r\nA color can be transformed into another in many ways. After each transformation, a new color object is produced and returned.\r\n\r\n    color = red.spin(180); //spins the color wheel for 180 degrees\r\n    color = red.mix(blue, 0.3); //mixes two colors with a given proportion.\r\n    color = red.lighten(0.2); //gets a lighter color\r\n\r\n\r\nFor full features and API documentation, please read [this documentation](http://justineo.github.com/kolor/) generated by [Docco](http://jashkenas.github.com/docco/).","tagline":"A color manipulation tool with sexy syntax.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}